var documenterSearchIndex = {"docs":
[{"location":"guide/","page":"User Guide","title":"User Guide","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"This is just a preview yet","category":"page"},{"location":"guide/#Installation","page":"User Guide","title":"Installation","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"To use this client, you need a compatible TypeDB Server running. Visit the Compatibility Table ","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"This pkg is not yet registered on the JuliaHub. As of now you would need to install it directly from the GitHub repo.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Inside the Julia REPL, type ] to enter the Pkg REPL mode then run","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"pkg> dev https://github.com/Humans-of-Julia/TypeDBClient.jl","category":"page"},{"location":"guide/#Quickstart","page":"User Guide","title":"Quickstart","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"First make sure, the TypeDB server is running. It is described here in the TypeDB Documentation.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"In the Julia REPL or in your source run ","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"using TypeDBCLient","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Instantiate a client and open a session.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"using TypeDBClient\n\nto be worked out yet..","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Modules = [TypeDBClient]","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [TypeDBClient]","category":"page"},{"location":"api/#TypeDBClient.AttributeType","page":"API Reference","title":"TypeDBClient.AttributeType","text":"AttributeType{V} <: AbstractAttributeType\n\nType parameter V contains the value type of an attribute.\n\n(OBJECT = 0, BOOLEAN = 1, LONG = 2, DOUBLE = 3, STRING = 4, DATETIME = 5)\n\n\n\n\n\n","category":"type"},{"location":"api/#TypeDBClient.RemoteConcept","page":"API Reference","title":"TypeDBClient.RemoteConcept","text":"Remote\n\nWrapper type that encapsulates a concept and transaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#TypeDBClient.RemoteRule","page":"API Reference","title":"TypeDBClient.RemoteRule","text":"Remote\n\nWrapper type that encapsulates a Rule and transaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.delete!-Tuple{TypeDBClient.ResponseCollector, Vector{UInt8}}","page":"API Reference","title":"Base.delete!","text":"delete!(resp_collector::ResponsCollector, id::Bytes)\n\nThe function will close the collecting result channel and remove this from the the resonse collector. Attention! Don't remove a result_channel manually from the Dictionary. This will not be thread safe.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.push!-Tuple{TypeDBClient.ResponseCollector, Vector{UInt8}}","page":"API Reference","title":"Base.push!","text":"push!(resp_collector::ResponsCollector, request::T) where {T<:Proto.ProtoType}\n\nFunction is meant to give back the result_channel in which the results for one request will be collected. Attention! Don't put a new Id manually on the ResponsCollector. It wouldn't be thread safe\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient._is_stream_respart_done-Tuple{Union{TypeDBClient.typedb.protocol.Transaction_Res, TypeDBClient.typedb.protocol.Transaction_ResPart}, TypeDBClient.BidirectionalStream}","page":"API Reference","title":"TypeDBClient._is_stream_respart_done","text":"function isstreamrespartdone(req_result::Proto.ProtoType)     This function decides how to treat the result. It returns whether it should push the     request to the answers and if it should break the retrieving loop.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.as_remote-Union{Tuple{T}, Tuple{D}, Tuple{D, T}} where {D<:TypeDBClient.AbstractConcept, T<:TypeDBClient.AbstractCoreTransaction}","page":"API Reference","title":"TypeDBClient.as_remote","text":"as_remote(x, t)\n\nCreate a Remote(@ref) object for a concept x with a transaction t.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.as_remote-Union{Tuple{T}, Tuple{D}, Tuple{D, T}} where {D<:TypeDBClient.AbstractRule, T<:TypeDBClient.AbstractCoreTransaction}","page":"API Reference","title":"TypeDBClient.as_remote","text":"as_remote(x, t)\n\nCreate a Remote(@ref) object for a concept x with a transaction t.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.batch_requests-Tuple{Channel{ProtoBuf.ProtoType}, Channel{TypeDBClient.typedb.protocol.Transaction_Client}}","page":"API Reference","title":"TypeDBClient.batch_requests","text":"function batchrequests(inchannel::Channel{Proto.ProtoType}, outchannel::Channel{Proto.TransactionClient})     This function contains the whole logic for batching incomming requests. The inner runner function will be     called every x ms and will send the collected request in one Transaction_Client message to teh server.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.bytes-Tuple{Base.UUID}","page":"API Reference","title":"TypeDBClient.bytes","text":"bytes(x)\n\nConvert x to Vector{UInt8}.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.collect_result-Tuple{Channel{Union{TypeDBClient.typedb.protocol.Transaction_Res, TypeDBClient.typedb.protocol.Transaction_ResPart}}, TypeDBClient.BidirectionalStream}","page":"API Reference","title":"TypeDBClient.collect_result","text":"function collectresult(reschannel::Channel{T}) where {T<:ProtoProtoType}     The function will be called for each single request. She works until     the whole result set will be collected.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.copy_to_proto-Union{Tuple{T}, Tuple{Any, Type{T}}} where T<:ProtoBuf.ProtoType","page":"API Reference","title":"TypeDBClient.copy_to_proto","text":"copytoproto(fromobject, toproto_struct::Type{T}) where {T<: ProtoType}     perform the conversation from a normal struct to a proto struct. The prerequisite     for this is the naming of the variable of the normal struct according to     the proto struct which is to be built.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.encoding","page":"API Reference","title":"TypeDBClient.encoding","text":"encoding(t)\n\nReturn the ProtoBuf encoding value for the given concept type t.\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.instantiate-Tuple{TypeDBClient.typedb.protocol._Type}","page":"API Reference","title":"TypeDBClient.instantiate","text":"instantiate(p)\n\nCreate a suitable object according to the type specified in the ProtoBuf object p. Return value will be a subtype of AbstractType.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.make_pulse_request-Tuple{TypeDBClient.AbstractCoreSession, TypeDBClient.Controller}","page":"API Reference","title":"TypeDBClient.make_pulse_request","text":"make_pulse_request(session::T) where {T<:AbstractCoreSession}\n\nThis function make a pulse request to keep the session alive.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.process_direct_requests-Tuple{Channel{ProtoBuf.ProtoType}, Channel{TypeDBClient.typedb.protocol.Transaction_Client}}","page":"API Reference","title":"TypeDBClient.process_direct_requests","text":"function processdirectrequests(inchannel::Channel{Proto.ProtoType}, outchannel::Channel{Proto.Transaction_Client})     This function process the incoming request directly to the server\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.safe_close-Tuple{Any}","page":"API Reference","title":"TypeDBClient.safe_close","text":"safe_close(source_to_close)\n\nClose a given resource which implementes the close functionalety safely and only logs potential errors\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.single_request-Tuple{TypeDBClient.BidirectionalStream, TypeDBClient.typedb.protocol.Transaction_Req, Bool}","page":"API Reference","title":"TypeDBClient.single_request","text":"function singlerequest(bidirectstream::BidirectionalStream, request::T, batch::Bool) where {T<: Proto.ProtoType}     This function process one single request and give back the results from the server to the calling functions. It is an intern     function.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.stream_request-Tuple{TypeDBClient.BidirectionalStream, TypeDBClient.typedb.protocol.Transaction_Req, Bool}","page":"API Reference","title":"TypeDBClient.stream_request","text":"function streamrequest(bidirectstream::BidirectionalStream, request::T, batch::Bool) where {T<: Proto.ProtoType}     Here we let the user decide what to do with the result channel. The returned value is the pure result_channel.\n\n\n\n\n\n","category":"method"},{"location":"api/#API-reference-to-be-filled","page":"API Reference","title":"API reference to be filled","text":"","category":"section"},{"location":"map.mm/#TypeDBClient","page":"TypeDBClient","title":"TypeDBClient","text":"","category":"section"},{"location":"map.mm/","page":"TypeDBClient","title":"TypeDBClient","text":"TypeDBClient.jl","category":"page"},{"location":"map.mm/#common","page":"TypeDBClient","title":"common","text":"","category":"section"},{"location":"map.mm/#concept","page":"TypeDBClient","title":"concept","text":"","category":"section"},{"location":"map.mm/#generated","page":"TypeDBClient","title":"generated","text":"","category":"section"},{"location":"map.mm/#logic","page":"TypeDBClient","title":"logic","text":"","category":"section"},{"location":"map.mm/#query","page":"TypeDBClient","title":"query","text":"","category":"section"},{"location":"map.mm/#rpc","page":"TypeDBClient","title":"rpc","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#Introduction","page":"Contributing","title":"Introduction","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"So, TypeDB itself provides various ways how to communicate (read from & write to) with the database.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"There is the Workbase the TypeDB Console and the different Clients to be used in an application. ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"There are clients for the following languages: Java, Node.js and Python. But there is no Julia client yet.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We are going to build the Julia client here.","category":"page"},{"location":"contributing/#Workflow-guidance-and-roadmap","page":"Contributing","title":"Workflow guidance & roadmap","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Our reference client is the Java version.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The roadmap for TypeDBClient.jl (24.01.2021):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"writing a HTTP/2 and gRPC implementation in Julia (done)\nbuilding the client architecture in Julia based on the protocol (WIP)\nbuilding up BDD infrastructure (WIP) ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The roadmap for TypeDB 2.0 (25.06.2021):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TypeDB 2.1.4 has been released, check here\nall client libraries have been released\nTypeDB 2.0 production release expected in first quarter of 2021  ","category":"page"},{"location":"contributing/#Dependencies","page":"Contributing","title":"Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We aim for a Julia native solution, but until then we need to call into Python.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"gRPCClient.jl\nProtobuf\ngRPC","category":"page"},{"location":"contributing/#How-to-start","page":"Contributing","title":"How to start","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Check for open issues here.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For further questions about how to start, ideally find us on Discord.","category":"page"},{"location":"contributing/#Project-status","page":"Contributing","title":"Project status","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The current project status can be seen on the GitHub Project Kanban","category":"page"},{"location":"contributing/#Useful-sources","page":"Contributing","title":"Useful sources","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Protobuf\ngRPC\ngRPC implementation introduction","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"changelog/#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"changelog/#lets-list-em-here","page":"Changelog","title":"lets list em here","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"25.06.2021","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"updated docs\ntrigger CI","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"08.11.2020","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"created project logo\nset up initial docs and guidelines","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"#Announcements","page":"Home","title":"Announcements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypeDB 2.0 has been released, these are the highlights of the new version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Replaced Cassandra with RocksDB\nNew Graph Storage Engine: replacing JanusGraph\nNew TypeDB Type System: our Knowledge Representation\nNew Graql: even simpler and more powerful\nNew Traversal Engine: replacing TinkerPop/Gremlin\nNew Query Planner: an Integer Linear Program\nNew Reasoning Engine: based on Event Loop + Actor Model\nNew Query Engine: an Asynchronous Producer-Consumer\nNew Client-Server Protocol: a Reactive Stream\nNew TypeDB Cluster: a Raft based distributed TypeDB\nNew TypeDB Console: powered by PicoCLI + JLine\nNew Benchmarking System: an Agent-based Simulation\nNew Grabl CI/CD: replacing CircleCI","category":"page"},{"location":"","page":"Home","title":"Home","text":"Read about it here in the forum.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The TypeDB docs can be found here: TypeDB documentation.","category":"page"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a community approach to translate a given client interface to the knowledge graph database TypeDB made by Vaticle into Julia Language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Starting out as an educational project and to benefit the Julia ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please review the user guide or if you'd like to help building the client, check the contribution guidlines.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Feel free to join the project channel on the Discord server, and take over a part in translating the given client reference into Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TypeDB is the knowledge graph engine to organise complex networks of data and making it queryable, by performing knowledge engineering.  Rooted in Knowledge Representation and Automated Reasoning, TypeDB provides the knowledge foundation for cognitive and intelligent (e.g. AI) systems, by providing an intelligent language for modelling, transactions and analytics. Being a distributed database, TypeDB is designed to scale over a network of computers through partitioning and replication.","category":"page"},{"location":"#Highlights-of-TypeDB","page":"Home","title":"Highlights of TypeDB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Entity-RelationshipTypeDB allows you to model your domain using the well-known Entity-Relationship model at its full expressivity. \nIt is composed of entity types, relationship types, and attribute types.\nUnlike other modelling languages, TypeDB allows you to define type hierarchies, hyper-entities, hyper-relations, and rules to build rich knowledge models.   TypesTypeDB provides to easily and quickly model type inheritance into the knowledge model. \nFollowing the object-oriented principle, this allows data types to inherit the behaviour and properties of their parent.\nLike functions in programming, rules can chain themselves to one another, creating abstractions of behaviour at the data level.   RulesTypeDB allows you to define rules in your knowledge schema, which extends the expressivity of your model. \nIt enables the system to derive new conclusions when a certain logical form in your dataset is satisfied.\nLike functions in programming, that rules can chain itself to another, creating abstractions of behaviour at the data level.   InferenceTypeDB's inference facility translates one query into all of its other interpretations. \nThis happens through two mechanisms: type-based and rule-based inference.\nNot only does this derive new conclusions and uncovers relationships that would otherwise be hidden, but it also enables the abstraction of complex patterns into simple queries.   AnalyticsDistributed analytics is a set of scalable algorithms that allows you to perform computation over large amounts of data in a distributed fashion. \nThey tend to belong to the family of MapReduce or Pregel algorithms (BSP). Often, this requires the implementation of challenging algorithms.\nIn TypeDB, these distributed analytics algorithms are built-in as native functionalities of the language.   ","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Credits go to the Humans of Julia organisation and the TypeDB team. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you like to have a chat, you can find the Humans of Julia on Discord here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also if you like to join the TypeDB community, you can find them on Discord as well here.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypeDBClient.jl is licensed under the MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The MIT License (MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright © 2021 Humans of Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"","page":"Home","title":"Home","text":"THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some more details here","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TypeDBClient]","category":"page"}]
}
