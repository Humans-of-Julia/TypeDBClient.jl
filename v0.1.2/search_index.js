var documenterSearchIndex = {"docs":
[{"location":"guide/","page":"User Guide","title":"User Guide","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"guide/#Installation","page":"User Guide","title":"Installation","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"To use this client, you need a compatible TypeDB Server running. You can find install instructions in the TypeDB Documentation.","category":"page"},{"location":"guide/#Compatibility-table:","page":"User Guide","title":"Compatibility table:","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"TypeDBClient.jl TypeDB TypeDB Cluster Julia\n0.1.0 2.4 - >=1.6\n0.1.1 2.5, 2.6 - >=1.6","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Inside the Julia REPL, type ] to enter the Pkg REPL mode then run","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"pkg> add TypeDBClient","category":"page"},{"location":"guide/#Quickstart","page":"User Guide","title":"Quickstart","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"First make sure the TypeDB server is running. See Start the TypeDB Server section.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"In the Julia REPL or in your source code:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"using TypeDBClient","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"You have two choices:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"If you are only interested in working interactively, you can use the more simplified API. An example for this is:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"using TypeDBClient: dbconnect, open, read, write, match, insert, commit, create_database\n\n# Connecting the client to TypeDB\ndbconnect(\"127.0.0.1\") do client\n\n    # Create a database\n    create_database(client, \"my-typedb\")\n    # Opening a session\n    open(client, \"my-typedb\") do session\n        # Open a write transaction\n        write(session) do transaction\n            # Insert a record using TypeQL\n            insert(transaction, raw\"insert $_ isa person;\")\n            # Commit the transaction\n            commit(transaction)\n        end\n        # Open a read session\n        read(session) do transaction\n            # Make a match request with a TypeQL string\n            answers = match(transaction, raw\"match $p isa person;\")\n        end\n    end\nend","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"For working with data using TypeQL, please refer to the syntax on TypeQL Documentation","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"If you want the full stack at your fingertips, then you can use the following commands:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"using TypeDBClient\n\n# Only for convenience reasons, you can write the full name if you want\ng = TypeDBClient\n\n# Create a client\nclient = g.CoreClient(\"127.0.0.1\",1729)\n\n# Create a database called typedb if the database wasn't already created by you previously.\ng.create_database(client, \"typedb\")\n\n#=\n    Open a session to write in the schema section of the database.\n    Be careful if you work with a schema session. No more sessions are allowed\n    until you close this session. Closing a session is mandatory. Don't forget this\n    at the end of your work.\n=#\nsession = g.CoreSession(client, \"typedb\" , g.Proto.Session_Type.SCHEMA, request_timeout=Inf)\n\n# Open a write transaction\ntransaction = g.transaction(session, g.Proto.Transaction_Type.WRITE)\n\n#=\n    Make a query in the database\n    The result of this query will be a vector of ConceptMap.\n    From there you can access the data as you want.\n=#\nresults = g.match(transaction, \"match \\$x sub thing;\")\n\n# If you want to work further in the session, go ahead, else close the session.\nclose(session)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"If you want to use the full potential of the client you should read the documentation of the API functions. There you will find all you need for working programmatically in the database. Otherwise, it is even possible to get equal results using TypeQL.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Modules = [TypeDBClient]","category":"page"},{"location":"guide/#User-API","page":"User Guide","title":"User API","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"delete\nThere are some delete functions:\ndatabase\ndelete_database(client::AbstractCoreClient, name::AbstractString)\ntype\nunset_has(transaction::AbstractCoreTransaction, thing::AbstractThing, attribute::Attribute)\nAny type can be deleted with this function. Be aware that only types which have no instances in the database can be deleted.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_has\nget_has(transaction::AbstractCoreTransaction,       thing::AbstractThing,       attribute_type::Optional{AttributeType} = nothing,       attribute_types::Optional{Vector{<:AbstractAttributeType}} = nothing,       keys_only = false)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_instances\nget_instances(r::RemoteConcept{<:AbstractThingType})\nget_owns\nget_owns(       r::RemoteConcept{<:AbstractThingType},       value_type::Optional{EnumType}=nothing,       keys_only::Bool=false   )\nget_owners\nAttribute\nget_owners(transaction::AbstractCoreTransaction,       attribute::AbstractAttribute,       thing_type::Optional{AbstractThingType} = nothing)\nAttributeType\nget_owners(r::RemoteConcept{<: AbstractAttributeType}, only_key = false)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_plays\nget_plays(r::RemoteConcept{<: AbstractThingType})","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_regex\nget_regex(r::RemoteConcept{<:AbstractAttributeType})\nget_rule\nget_rule(log_mgr::AbstractLogicManager, label::AbstractString)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_rules\nget_rules(log_mgr::AbstractLogicManager)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_subtypes\nget_subtypes(r::RemoteConcept{<:AbstractType})","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_supertype\nget_supertype(r::RemoteConcept{<:AbstractType})","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"get_supertypes\nget_supertypes(r::RemoteConcept{<:AbstractType})","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"set_abstract\nset_abstract(r::RemoteConcept{<:AbstractThingType})\nset_has\nset_has(transaction::AbstractCoreTransaction, thing::AbstractThing, attribute::Attribute)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"set_label\nset_label(r::RemoteConcept{<:AbstractType},   new_label_name::AbstractString)\nset_owns\nset_owns(           r::RemoteConcept{<:AbstractType},           attribute_type::AbstractType,           is_key::Bool=false,           overriden_type::Optional{AbstractType}=nothing       )","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"set_plays\nset_plays(       r::RemoteConcept{<:AbstractThingType},       role_type::AbstractRoleType,       overridden_role_type::Optional{AbstractRoleType}=nothing   )","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"set_regex\nset_regex(r::RemoteConcept{<:AbstractAttributeType},   regex::Optional{AbstractString})","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"set_supertype\nset_supertype(r::RemoteConcept{<: AbstractThingType,<: AbstractCoreTransaction},       super_type::AbstractThingType)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"unset_abstract\nunset_abstract(r::RemoteConcept{<:AbstractThingType})","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"unset_has\nunset_has(transaction::AbstractCoreTransaction, thing::AbstractThing, attribute::Attribute)","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [TypeDBClient]","category":"page"},{"location":"api/#TypeDBClient.AttributeType","page":"API Reference","title":"TypeDBClient.AttributeType","text":"AttributeType{V} <: AbstractAttributeType\n\nType parameter V contains the value type of an attribute.\n\n(OBJECT = 0, BOOLEAN = 1, LONG = 2, DOUBLE = 3, STRING = 4, DATETIME = 5)\n\n\n\n\n\n","category":"type"},{"location":"api/#TypeDBClient.RemoteConcept","page":"API Reference","title":"TypeDBClient.RemoteConcept","text":"Remote\n\nWrapper type that encapsulates a concept and transaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#TypeDBClient.RemoteRule","page":"API Reference","title":"TypeDBClient.RemoteRule","text":"Remote\n\nWrapper type that encapsulates a Rule and transaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.delete!-Tuple{TypeDBClient.ResponseCollector, Vector{UInt8}}","page":"API Reference","title":"Base.delete!","text":"delete!(resp_collector::ResponsCollector, id::Bytes)\n\nThe function will close the collecting result channel and remove this from the the resonse collector. Attention! Don't remove a result_channel manually from the Dictionary. This will not be thread safe.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.push!-Tuple{TypeDBClient.ResponseCollector, Vector{UInt8}}","page":"API Reference","title":"Base.push!","text":"push!(resp_collector::ResponsCollector, request::T) where {T<:Proto.ProtoType}\n\nFunction is meant to give back the result_channel in which the results for one request will be collected. Attention! Don't put a new Id manually on the ResponsCollector. It wouldn't be thread safe\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient._is_stream_respart_done-Tuple{Union{TypeDBClient.typedb.protocol.Transaction_Res, TypeDBClient.typedb.protocol.Transaction_ResPart}, TypeDBClient.BidirectionalStream}","page":"API Reference","title":"TypeDBClient._is_stream_respart_done","text":"function isstreamrespartdone(req_result::Proto.ProtoType)     This function decides how to treat the result. It returns whether it should push the     request to the answers and if it should break the retrieving loop.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.as_remote-Union{Tuple{D}, Tuple{D, TypeDBClient.AbstractCoreTransaction}} where D<:TypeDBClient.AbstractConcept","page":"API Reference","title":"TypeDBClient.as_remote","text":"as_remote(x, t)\n\nCreate a Remote(@ref) object for a concept x with a transaction t.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.as_remote-Union{Tuple{T}, Tuple{D}, Tuple{D, T}} where {D<:TypeDBClient.AbstractRule, T<:TypeDBClient.AbstractCoreTransaction}","page":"API Reference","title":"TypeDBClient.as_remote","text":"as_remote(x, t)\n\nCreate a Remote(@ref) object for a concept x with a transaction t.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.batch_requests-Tuple{Channel{ProtoBuf.ProtoType}, Channel{TypeDBClient.typedb.protocol.Transaction_Client}}","page":"API Reference","title":"TypeDBClient.batch_requests","text":"function batchrequests(inchannel::Channel{Proto.ProtoType}, outchannel::Channel{Proto.TransactionClient})     This function contains the whole logic for batching incomming requests. The inner runner function will be     called every x ms and will send the collected request in one Transaction_Client message to teh server.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.bytes-Tuple{Base.UUID}","page":"API Reference","title":"TypeDBClient.bytes","text":"bytes(x)\n\nConvert x to Vector{UInt8}.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.collect_result-Tuple{Channel{Union{TypeDBClient.typedb.protocol.Transaction_Res, TypeDBClient.typedb.protocol.Transaction_ResPart}}, TypeDBClient.BidirectionalStream, Vector{UInt8}}","page":"API Reference","title":"TypeDBClient.collect_result","text":"function collectresult(reschannel::Channel{T}) where {T<:ProtoProtoType}     The function will be called for each single request. She works until     the whole result set will be collected.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.copy_to_proto-Union{Tuple{T}, Tuple{Any, Type{T}}} where T<:ProtoBuf.ProtoType","page":"API Reference","title":"TypeDBClient.copy_to_proto","text":"copytoproto(fromobject, toproto_struct::Type{T}) where {T<: ProtoType}     perform the conversation from a normal struct to a proto struct. The prerequisite     for this is the naming of the variable of the normal struct according to     the proto struct which is to be built.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.delete","page":"API Reference","title":"TypeDBClient.delete","text":"delete(transaction::AbstractCoreTransaction, query::AbstractString, options = Proto.Options())\n\nTo delete something without using certain functions you can use a TypeQL string put this as an argument to the delete function.\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.delete-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThingType}}","page":"API Reference","title":"TypeDBClient.delete","text":"delete(r::RemoteConcept{<:AbstractThingType})\n\nTo delete a type in the database pack the type with the transaction to a RemoteConcept. Be aware that a type can only be deleted if no Entity, Attribute or Relation is in the database which is based on this type.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.delete-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThing}}","page":"API Reference","title":"TypeDBClient.delete","text":"delete(r::RemoteConcept{<:AbstractThing})\n\nTo delete an Entity, Relation or Attribute this have to be packed with the transaction to a RemoteConcept. To accomplish this see the function as_remote.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.delete-Tuple{TypeDBClient.RemoteRule}","page":"API Reference","title":"TypeDBClient.delete","text":"delete(remote::RemoteRule)\n\nTo delete a type in the database pack the type with the transaction to a RemoteRule.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.delete_database-Tuple{TypeDBClient.AbstractCoreClient, AbstractString}","page":"API Reference","title":"TypeDBClient.delete_database","text":"delete_database(client::AbstractCoreClient, name::AbstractString)\n\nDelete the database for the given name without any question. Be carful. There is no recovery function within this call.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_has","page":"API Reference","title":"TypeDBClient.get_has","text":"get_has(transaction::AbstractCoreTransaction,\n    thing::AbstractThing,\n    attribute_type::Optional{AttributeType} = nothing,\n    attribute_types::Optional{Vector{<:AbstractAttributeType}} = nothing,\n    keys_only = false)\n\nWith this function it is possible to get attributes of an entity or a relation. Optional it is possible to restrict the type(s) of attributes which will retrieved from the database. You can decide between only one ore more than one type.\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.get_instances-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThingType}}","page":"API Reference","title":"TypeDBClient.get_instances","text":"get_instances(r::RemoteConcept{<:AbstractThingType})\n\nHere you can get all instances for a given Type. The has to be given as a RemoteConcept\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_owners","page":"API Reference","title":"TypeDBClient.get_owners","text":"get_owners(transaction::AbstractCoreTransaction,\n    attribute::AbstractAttribute,\n    thing_type::Optional{AbstractThingType} = nothing)\n\ngives back all things has this attribute\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.get_owners-2","page":"API Reference","title":"TypeDBClient.get_owners","text":"get_owners(r::RemoteConcept{<: AbstractAttributeType}, only_key = false)\n\nReturns all ThingTypes which owns the given AttributeType\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.get_owns","page":"API Reference","title":"TypeDBClient.get_owns","text":"get_owns(\n    r::RemoteConcept{<:AbstractThingType},\n    value_type::Optional{EnumType}=nothing,\n    keys_only::Bool=false\n)\n\nget_owns will give back all thingtypes which owns a given AttributeType\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.get_plays-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThingType}}","page":"API Reference","title":"TypeDBClient.get_plays","text":"get_plays(r::RemoteConcept{<: AbstractThingType})\n\nReturns which roles are played by the given ThingType\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_regex-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractAttributeType}}","page":"API Reference","title":"TypeDBClient.get_regex","text":"get_regex(r::RemoteConcept{<:AbstractAttributeType})\n\nFor AttributeTypes with the value type String it is possible to set a regex pattern to proof the incoming string to fulfill the pattern. Otherwise the insert will fail. The function wil give back a regex string if set. The regex string follows the conventions of the Java programming language.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_rule-Tuple{TypeDBClient.AbstractLogicManager, AbstractString}","page":"API Reference","title":"TypeDBClient.get_rule","text":"get_rule(log_mgr::AbstractLogicManager, label::AbstractString)\n\nThe get_rule function will return the rule for the given label\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_rules-Tuple{TypeDBClient.AbstractLogicManager}","page":"API Reference","title":"TypeDBClient.get_rules","text":"get_rules(log_mgr::AbstractLogicManager)\n\nHere we get all rules in the schema exposed by the session.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_subtypes-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractType}}","page":"API Reference","title":"TypeDBClient.get_subtypes","text":"get_subtypes(r::RemoteConcept{<:AbstractType})\n\nget_subtypes returns all subtypes for a given type. A specialzation of this function is made for AttributeType.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_supertype-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractType}}","page":"API Reference","title":"TypeDBClient.get_supertype","text":"get_supertype(r::RemoteConcept{<:AbstractType})\n\nReturns one step upwards in the chain of types and returns the direct supertype of a given type.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.get_supertypes-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractType}}","page":"API Reference","title":"TypeDBClient.get_supertypes","text":"get_supertypes(r::RemoteConcept{<:AbstractType})\n\nHere all supertypes in the chain upwards from the given type will be returned.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.make_pulse_request-Tuple{TypeDBClient.AbstractCoreSession, TypeDBClient.Controller}","page":"API Reference","title":"TypeDBClient.make_pulse_request","text":"make_pulse_request(session::T) where {T<:AbstractCoreSession}\n\nThis function make a pulse request to keep the session alive.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.process_direct_requests-Tuple{Channel{ProtoBuf.ProtoType}, Channel{TypeDBClient.typedb.protocol.Transaction_Client}}","page":"API Reference","title":"TypeDBClient.process_direct_requests","text":"function processdirectrequests(inchannel::Channel{Proto.ProtoType}, outchannel::Channel{Proto.Transaction_Client})     This function process the incoming request directly to the server\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.put_rule-Tuple{TypeDBClient.AbstractLogicManager, AbstractString, AbstractString, AbstractString}","page":"API Reference","title":"TypeDBClient.put_rule","text":"put_rule(log_mgr::AbstractLogicManager, label::AbstractString, when::AbstractString, then::AbstractString)\n\nThe function gives the possibility to formulate a rule and put it in the database. The when and then clauses will be written in TypeQL terms.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.safe_close-Tuple{Any}","page":"API Reference","title":"TypeDBClient.safe_close","text":"safe_close(source_to_close)\n\nClose a given resource which implementes the close functionalety safely and only logs potential errors\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.set_abstract-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThingType}}","page":"API Reference","title":"TypeDBClient.set_abstract","text":"set_abstract(r::RemoteConcept{<:AbstractThingType})\n\nIn the chain of fine grained functions in the concept section here we can determine a given ThingType is abstract.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.set_has-Tuple{TypeDBClient.AbstractCoreTransaction, TypeDBClient.AbstractThing, Attribute}","page":"API Reference","title":"TypeDBClient.set_has","text":"set_has(transaction::AbstractCoreTransaction, thing::AbstractThing, attribute::Attribute)\n\nFor a given Thing the attribute will set as associated.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.set_label-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractType}, AbstractString}","page":"API Reference","title":"TypeDBClient.set_label","text":"set_label(r::RemoteConcept{<:AbstractType},\n    new_label_name::AbstractString)\n\nWith this function we are able to set the label for a given Type. This gives us the chance to rename a given type. But be prepared, this is only allowed if the type is not instantiated by inserted data.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.set_owns","page":"API Reference","title":"TypeDBClient.set_owns","text":"set_owns(\n    r::RemoteConcept{<:AbstractType},\n    attribute_type::AbstractType,\n    is_key::Bool=false,\n    overriden_type::Optional{AbstractType}=nothing\n)\n\nWith set_owns it is possible to assign an attribute to a type. If it is needed it is possible to set the attribute as unique. This means for the type where the attribute is set as key only one instance of the type can have a specific attribute: E.g. person entity has a unique email as an attribute. So it is not possible to have two entities with the same email address.\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.set_plays","page":"API Reference","title":"TypeDBClient.set_plays","text":"set_plays(\n    r::RemoteConcept{<:AbstractThingType},\n    role_type::AbstractRoleType,\n    overridden_role_type::Optional{AbstractRoleType}=nothing\n)\n\nWith set_play we are able to set a roletype to an ThingType and it is possible to set a new RoleType instead of the old. Be cautious, this is only allowed for not instantiated types.\n\n\n\n\n\n","category":"function"},{"location":"api/#TypeDBClient.set_regex-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractAttributeType}, Union{Nothing, AbstractString}}","page":"API Reference","title":"TypeDBClient.set_regex","text":"set_regex(r::RemoteConcept{<:AbstractAttributeType},\n    regex::Optional{AbstractString})\n\nFor AttributeTypes with the value type String it is possible to set a regex pattern to check the incoming string matches the pattern, otherwise the insert will fail. The function will set a regex string to a given attribute. The regex string follows the conventions of the Java programming language.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.set_supertype-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThingType}, TypeDBClient.AbstractThingType}","page":"API Reference","title":"TypeDBClient.set_supertype","text":"set_supertype(r::RemoteConcept{<: AbstractThingType,<: AbstractCoreTransaction},\n    super_type::AbstractThingType)\n\nHere we have the chance to set a given ThingType as the supertype of an other Thingtype. Mixing of diffent root types eg. AttributeType with EntityType is not allowed.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.single_request-Tuple{TypeDBClient.BidirectionalStream, TypeDBClient.typedb.protocol.Transaction_Req, Bool}","page":"API Reference","title":"TypeDBClient.single_request","text":"function singlerequest(bidirectstream::BidirectionalStream, request::T, batch::Bool) where {T<: Proto.ProtoType}     This function process one single request and give back the results from the server to the calling functions. It is an intern     function.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.stream_request-Tuple{TypeDBClient.BidirectionalStream, TypeDBClient.typedb.protocol.Transaction_Req, Bool}","page":"API Reference","title":"TypeDBClient.stream_request","text":"function streamrequest(bidirectstream::BidirectionalStream, request::T, batch::Bool) where {T<: Proto.ProtoType}     Here we let the user decide what to do with the result channel. The returned value is the pure result_channel.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.unset_abstract-Tuple{TypeDBClient.RemoteConcept{<:TypeDBClient.AbstractThingType}}","page":"API Reference","title":"TypeDBClient.unset_abstract","text":"unset_abstract(r::RemoteConcept{<:AbstractThingType})\n\nWith this function it is possible to change an ThingType from abstact to normal behavior which means that the given ThingType can be instanceated.\n\n\n\n\n\n","category":"method"},{"location":"api/#TypeDBClient.unset_has-Tuple{TypeDBClient.AbstractCoreTransaction, TypeDBClient.AbstractThing, Attribute}","page":"API Reference","title":"TypeDBClient.unset_has","text":"unset_has(transaction::AbstractCoreTransaction, thing::AbstractThing, attribute::Attribute)\n\nHere an given attribute will be detached from a given thing\n\n\n\n\n\n","category":"method"},{"location":"api/#API-reference-to-be-filled","page":"API Reference","title":"API reference to be filled","text":"","category":"section"},{"location":"map.mm/#TypeDBClient","page":"TypeDBClient","title":"TypeDBClient","text":"","category":"section"},{"location":"map.mm/","page":"TypeDBClient","title":"TypeDBClient","text":"TypeDBClient.jl","category":"page"},{"location":"map.mm/#common","page":"TypeDBClient","title":"common","text":"","category":"section"},{"location":"map.mm/#concept","page":"TypeDBClient","title":"concept","text":"","category":"section"},{"location":"map.mm/#generated","page":"TypeDBClient","title":"generated","text":"","category":"section"},{"location":"map.mm/#logic","page":"TypeDBClient","title":"logic","text":"","category":"section"},{"location":"map.mm/#query","page":"TypeDBClient","title":"query","text":"","category":"section"},{"location":"map.mm/#rpc","page":"TypeDBClient","title":"rpc","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#Introduction","page":"Contributing","title":"Introduction","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"So, TypeDB itself provides various ways how to communicate (read from & write to) the database.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"There is the Workbase the TypeDB Console and the different Clients to be used in an application.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"There are clients for the following languages: Java, Node.js and Python.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This is the community driven Julia client.","category":"page"},{"location":"contributing/#Workflow-guidance-and-roadmap","page":"Contributing","title":"Workflow guidance & roadmap","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Our reference client is the Java version.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The roadmap for TypeDBClient.jl (2021-10-01):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"completing the client with the cluster functionality (commercial product by Vaticle)\nimproving speed\nmaking multithreading possible and threadsafe","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The roadmap for TypeDBClient.jl (24.01.2021):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"writing a HTTP/2 and gRPC implementation in Julia (done)\nbuilding the client architecture in Julia based on the protocol (done)\nbuilding up BDD infrastructure (done)","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The roadmap for TypeDB 2.0 (25.06.2021):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TypeDB 2.3.1 has been released, check here\nall client libraries have been released","category":"page"},{"location":"contributing/#Dependencies","page":"Contributing","title":"Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We aim for a Julia native solution.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"gRPCClient.jl\nProtobuf\ngRPC","category":"page"},{"location":"contributing/#How-to-start","page":"Contributing","title":"How to start","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Check for open issues here.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For further questions about how to start, ideally find us on Discord.","category":"page"},{"location":"contributing/#Project-status","page":"Contributing","title":"Project status","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The current project status can be seen on the GitHub Project Kanban","category":"page"},{"location":"contributing/#Useful-sources","page":"Contributing","title":"Useful sources","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Protobuf\ngRPC\ngRPC implementation introduction","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"For a quick example based introduction, you can refer to the folder examples and check out the files there.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"However, if you would like to watch a video, showing how to work with the client in a Notebook, you can watch this recording:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"A TypeDB Client Interface in Julia | TypeDBClient.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Have fun and feel free to ask questions in our community channel on Discord!","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"TypeDBClient.jl Discord channel: Invite link","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"changelog/#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"changelog/#lets-list-em-here","page":"Changelog","title":"lets list em here","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"2021-10-03","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"more work on docs\nrelease preparations","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"2021-09-27","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"changed the client to use threading where it is suitable\nextended the docs","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"2021-06-25","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"updated docs\ntrigger CI","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"2020-11-08","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"created project logo\nset up initial docs and guidelines","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TypeDBClient","category":"page"},{"location":"#Announcements","page":"Home","title":"Announcements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypeDB 2.0 has been released, these are the highlights of the new version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Replaced Cassandra with RocksDB\nNew Graph Storage Engine: replacing JanusGraph\nNew TypeDB Type System: our Knowledge Representation\nNew Graql: even simpler and more powerful\nNew Traversal Engine: replacing TinkerPop/Gremlin\nNew Query Planner: an Integer Linear Program\nNew Reasoning Engine: based on Event Loop + Actor Model\nNew Query Engine: an Asynchronous Producer-Consumer\nNew Client-Server Protocol: a Reactive Stream\nNew TypeDB Cluster: a Raft based distributed TypeDB\nNew TypeDB Console: powered by PicoCLI + JLine\nNew Benchmarking System: an Agent-based Simulation\nNew Grabl CI/CD: replacing CircleCI","category":"page"},{"location":"","page":"Home","title":"Home","text":"Read about it here in the forum.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The TypeDB docs can be found here: TypeDB documentation.","category":"page"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a community approach to translate a given client interface to the knowledge graph database TypeDB made by Vaticle into Julia Language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Starting out as an educational project and to benefit the Julia ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please review the user guide or if you'd like to help building the client, check the contribution guidlines.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Feel free to join the project channel on the Discord server, and take over a part in translating the given client reference into Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TypeDB is the knowledge graph engine to organise complex networks of data and making it queryable, by performing knowledge engineering.  Rooted in Knowledge Representation and Automated Reasoning, TypeDB provides the knowledge foundation for cognitive and intelligent (e.g. AI) systems, by providing an intelligent language for modelling, transactions and analytics. Being a distributed database, TypeDB is designed to scale over a network of computers through partitioning and replication.","category":"page"},{"location":"#Highlights-of-TypeDB","page":"Home","title":"Highlights of TypeDB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Entity-RelationshipTypeDB allows you to model your domain using the well-known Entity-Relationship model at its full expressivity. \nIt is composed of entity types, relationship types, and attribute types.\nUnlike other modelling languages, TypeDB allows you to define type hierarchies, hyper-entities, hyper-relations, and rules to build rich knowledge models.   TypesTypeDB provides to easily and quickly model type inheritance into the knowledge model. \nFollowing the object-oriented principle, this allows data types to inherit the behaviour and properties of their parent.\nLike functions in programming, rules can chain themselves to one another, creating abstractions of behaviour at the data level.   RulesTypeDB allows you to define rules in your knowledge schema, which extends the expressivity of your model. \nIt enables the system to derive new conclusions when a certain logical form in your dataset is satisfied.\nLike functions in programming, that rules can chain itself to another, creating abstractions of behaviour at the data level.   InferenceTypeDB's inference facility translates one query into all of its other interpretations. \nThis happens through two mechanisms: type-based and rule-based inference.\nNot only does this derive new conclusions and uncovers relationships that would otherwise be hidden, but it also enables the abstraction of complex patterns into simple queries.   AnalyticsDistributed analytics is a set of scalable algorithms that allows you to perform computation over large amounts of data in a distributed fashion. \nThey tend to belong to the family of MapReduce or Pregel algorithms (BSP). Often, this requires the implementation of challenging algorithms.\nIn TypeDB, these distributed analytics algorithms are built-in as native functionalities of the language.   ","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Credits go to the Humans of Julia organisation and the TypeDB team. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you like to have a chat, you can find the Humans of Julia on Discord here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also if you like to join the TypeDB community, you can find them on Discord as well here.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TypeDBClient.jl is licensed under the MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The MIT License (MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright © 2021 Humans of Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"","page":"Home","title":"Home","text":"THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some more details here","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TypeDBClient]","category":"page"}]
}
